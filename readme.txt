=== Section Menus Shortcode ===
Contributors: ucfwebcom
Tags: ucf, section, menus
Requires at least: 4.7.3
Tested up to: 5.2.1
Stable tag: 1.1.0
License: GPLv3 or later
License URI: http://www.gnu.org/copyleft/gpl-3.0.html

Provides shortcodes for generating a sticky menu on a page, populated automatically based on sections on the page or manually with custom links.


== Description ==

Provides shortcodes for generating a sticky menu on a page, populated automatically based on sections on the page or with custom links.  This menu system is meant to be used with Bootstrap 4 or the [Athena Framework](https://ucf.github.io/Athena-Framework/).

Note: jQuery is *required* for the JavaScript included with this plugin to work.  See [#Installation-Requirements](Installation Requirements) for more information.

= Usage =

Use the `[section-menu]` shortcode to generate a menu.  By default, menu links will be generated automatically from sections on the page with the `.auto-section` class.

Auto sections **must** also have an ID and menu link title defined.  The link title can be defined by either adding the `data-section-link-title` attribute to the section, or by adding the `.section-title` class to a heading within the section to reference that heading's text.

Note that auto sections don't have to be literal `section` elements; `div`, `article`, and `aside` are also supported.  Sections generated by the [UCF Section plugin](https://github.com/UCF/UCF-Section-Plugin)'s `[ucf-section]` shortcode are also supported when used with appropriate shortcode parameters.

**Example:**
```html
<!--
Generates a menu with 3 links: "About", "News", and "Events".
-->

[section-menu]

<div id="about" class="auto-section" data-section-link-title="About">
  ...
</div>

<section id="news" class="auto-section">
  <h2 class="section-title">News</h2>
  ...
</section>

[ucf-section slug="my-events-section-post" class="auto-section" title="Events" section_id="events"]
```

Section menus can alternatively be generated with a manually-curated list of links, using the `[section-menu-item]` shortcode.  **At this time, automatically-generated menu links are not supported in menus that utilize custom links.**

**Example:**
```html
<!--
Generates a menu with 2 links: "ucf.edu" and "About".
-->

[section-menu]
[section-menu-item href="https://www.ucf.edu"]ucf.edu[/section-menu-item]
[section-menu-item href="#about"]About[/section-menu-item]
[/section-menu]
```

= Shortcode Options =

**`[section-menu]`**
| Shortcode attribute | Description                                                                                                                                         | Default Value |
|---------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------|---------------|
| selector            | The selector to use when fetching sections to display automatically in the menu.                                                                    | .auto-section |
| layout              | The layout name to use for the generated menu.  Themes and other plugins can register custom layouts to customize the look+feel of generated menus. | default       |

**`[section-menu-item]`**
| Shortcode attribute | Description                                                                                                                                                   | Default Value         |
|---------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------|
| li_class            | Classes to apply to the link's outer list item element.  Separate classes with a single space.                                                                | nav-item              |
| a_class             | Classes to apply to the link.  Separate classes with a single space.                                                                                          | section-link nav-link |
| href                | Where the link should navigate to.                                                                                                                            |                       |
| rel                 | rel (relationship) attribute to assign to the link.                                                                                                           |                       |
| new_window          | (Boolean) Whether or not the link should open in a new window.                                                                                                | false                 |
| layout              | The layout name to use for the generated menu item.  Themes and other plugins can register custom layouts to customize the look+feel of generated menu items. | default               |


= Customization =
The shortcodes provided in this plugin utilize a filter-based layout system that allows themes or other plugins to define custom markup adjustments to generated menus and menu items.

To define a custom menu layout, define a new filter and hook it into the `section_menus_display_${layout}` hook, where `${layout}` is the desired name of your layout:

**Example:**
```php
// Define a new layout called "custom"

function mysite_section_menus_display_custom( $selector, $content='' ) {
    $content     = trim( $content );
	$list_items  = $content ? trim( Section_Menus_Common::get_custom_menu_items( $content ) ) : '';
	$auto_select = $list_items ? 'false' : 'true';

    return '...';
}

add_filter( 'section_menus_display_custom', 'mysite_section_menus_display_custom', 10, 2 );
```

See the existing `section_menus_display_default` function in this plugin as an example of how a menu layout should be structured.  We also recommend reviewing `src/js/section-menu.js` to get a feel for elements/classes that are required in any menu layout.

Individual menu item markup can also be adjusted using the `section_menu_item_display_${layout}` hook:

**Example:**
```php
// Define a new layout called "custom"

function mysite_section_menu_item_display_custom( $atts, $content='' ) {
    return '...';
}

add_filter( 'section_menu_item_display_custom', 'mysite_section_menu_item_display_custom', 10, 2 );
```

See the existing `section_menu_item_display_default` function in this plugin as an example of how a menu item layout should be structured.


== Installation ==

= Manual Installation =
1. Upload the plugin files (unzipped) to the `/wp-content/plugins` directory, or install the plugin through the WordPress plugins screen directly.
2. Activate the plugin through the "Plugins" screen in WordPress

= WP CLI Installation =
1. `$ wp plugin install --activate https://github.com/UCF/Section-Menus-Shortcode/archive/master.zip`.  See [WP-CLI Docs](http://wp-cli.org/commands/plugin/install/) for more command options.

= Github Updater Installation =
This theme supports installation and updates via the [Github Updater plugin](https://github.com/afragen/github-updater). See their documentation for more information on setup and usage. (Requires PHP 5.6.0+)


== Changelog ==

= 1.1.0 =
Enhancements:
* Added the ability to manually define section menu links instead of them being generated automatically via JavaScript.

  The new `[section-menu-item]` allows you to define a link within a section menu.  Links can be internal page anchors or external links.  Parameters are available for adding `rel` attributes, adjusting CSS classes on the generated `<li>` and `<a>` elements, and to open the generated link in a new window.

  Example:

  ```
  [section-menu]
  [section-menu-item href="#some-section"]Page Section Link[/section-menu-item]
  [section-menu-item a_class="..." li_class="..." href="https://www.ucf.edu/" rel="nofollow" new_window="true"]External Link[/section-menu-item]
  [/section-menu]
  ```

  Manually-defined link items will only take effect if at least one valid inner `[section-menu-item]` shortcode is present within an enclosing `[section-menu][/section-menu]` shortcode.  Otherwise, links will still be generated automatically based on existing sections on the page.

Bug Fixes:
* Fixed issue where empty section menus would still be visible at smaller screen sizes.

= 1.0.4 =
Bug Fix:
* Updated mobile menu to close when menu item is clicked

= 1.0.3 =
Enhancements:
* Added affix offset calculations that account for the UCF Header

Bug Fixes:
* Added fix for "jump" when the navbar affixes
* Fixed bug where two nav links could be highlighted at the same time

= 1.0.2 =
* Added "Skip to Section" text to the mobile nav toggle button for clarity
* Fixed minor PHP notice

= 1.0.1 =
* Updated mobile styles and bug fix

= 1.0.0 =
* Initial release


== Upgrade Notice ==

n/a


== Installation Requirements ==

- A version of jQuery compatible with [Bootstrap 4](https://getbootstrap.com/) or the [Athena Framework](https://ucf.github.io/Athena-Framework/) is required on sites that utilize this plugin.


== Development ==

Note that compiled, minified css and js files are included within the repo.  Changes to these files should be tracked via git (so that users installing the plugin using traditional installation methods will have a working plugin out-of-the-box.)

[Enabling debug mode](https://codex.wordpress.org/Debugging_in_WordPress) in your `wp-config.php` file is recommended during development to help catch warnings and bugs.

= Requirements =
* node
* gulp-cli

= Instructions =
1. Clone the Section-Menus-Shortcode repo into your local development environment, within your WordPress installation's `plugins/` directory: `git clone https://github.com/UCF/Section-Menus-Shortcode.git`
2. `cd` into the new Section-Menus-Shortcode directory, and run `npm install` to install required packages for development into `node_modules/` within the repo
3. Optional: If you'd like to enable [BrowserSync](https://browsersync.io) for local development, or make other changes to this project's default gulp configuration, copy `gulp-config.template.json`, make any desired changes, and save as `gulp-config.json`.

    To enable BrowserSync, set `sync` to `true` and assign `syncTarget` the base URL of a site on your local WordPress instance that will use this plugin, such as `http://localhost/wordpress/my-site/`.  Your `syncTarget` value will vary depending on your local host setup.

    The full list of modifiable config values can be viewed in `gulpfile.js` (see `config` variable).
3. Run `gulp default` to process front-end assets.
4. If you haven't already done so, create a new WordPress site on your development environment to test this plugin against.
5. Activate this plugin on your development WordPress site.
6. Run `gulp watch` to continuously watch changes to scss and js files.  If you enabled BrowserSync in `gulp-config.json`, it will also reload your browser when plugin files change.

= Other Notes =
* This plugin's README.md file is automatically generated. Please only make modifications to the README.txt file, and make sure the `gulp readme` command has been run before committing README changes.  See the [contributing guidelines](https://github.com/UCF/Section-Menus-Shortcode/blob/master/CONTRIBUTING.md) for more information.


== Contributing ==

Want to submit a bug report or feature request?  Check out our [contributing guidelines](https://github.com/UCF/Section-Menus-Shortcode/blob/master/CONTRIBUTING.md) for more information.  We'd love to hear from you!
